{"version":3,"sources":["edit_pencil.png","Item.js","List.js","AddTask.js","Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Item","props","className","type","id","checked","isCompleted","onChange","e","onItemChange","target","htmlFor","value","description","src","Edit","height","width","alt","onClick","onButtonClick","onPassID","List","todo","map","item","date","creationDate","priority","AddTask","useState","setDescription","setPriority","placeholder","currentTarget","onSubmit","Alert","newDesc","setNewDesc","onClose","onOK","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","collectionName","App","query","collection","sortVal","setSortVal","useCollection","orderBy","isVisible","setVisibility","showAlert","setShowAlert","storeID","setStoreID","data","toggleModal","docs","doc","forEach","delete","generateUniqueID","Date","now","set","filter","itemID","field","update","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bc804f4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/edit_pencil.eea4cb1a.png\";","import './Item.css';\nimport Edit from \"./edit_pencil.png\"\n\nfunction Item(props) {\n    return (\n        <div className={\"item\"}>\n        <input type={\"checkbox\"} className={\"checkbox\"} id={props.id} checked={props.isCompleted}\n               onChange={(e) => props.onItemChange(props.id, \"isCompleted\", e.target.checked)}/>\n        <label htmlFor={props.id} className=\"label\" value={props.description}>{props.description}</label>\n        <button className={\"editButton\"}><img src={Edit} height={\"25\"} width={\"25\"} alt={\"edit-icon\"} className={\"edit\"} onClick={() => {\n            props.onButtonClick();\n            props.onPassID(props.id);\n        }}/></button>\n        </div>);\n}\n\nexport default Item;","import './List.css'\nimport Item from './Item'\n\nfunction List(props) {\n    return (<div className={\"list\"}>\n            {props.todo.map(item =>\n                <Item key={item.id} id={item.id} description={item.description} isCompleted={item.isCompleted}\n                      date={item.creationDate} priority={item.priority} onItemChange={props.onItemChange}\n                      onButtonClick={() => props.onButtonClick()}\n                      onPassID={props.onPassID}/>)}\n        </div>\n    );\n}\n\nexport default List;","import \"./App.css\"\nimport {useState} from \"react\";\n\n\nexport default function AddTask(props) {\n    const [description, setDescription] = useState('');\n    const [priority, setPriority] = useState(1);\n\n    return (\n        <div id=\"list\">\n            <input type=\"text\" id=\"task-description\" placeholder=\"task description\"\n                   onChange={(e) => setDescription(e.currentTarget.value)}/>\n            <select id=\"priority\" onChange={(e) => setPriority(e.currentTarget.value)}>\n                <option value={1}>High</option>\n                <option value={2}>Medium</option>\n                <option value={3}>Low</option>\n            </select>\n            <input className={\"button\"} type=\"submit\" id=\"submit-task\" value=\"add task\"\n                   onClick={() => props.onSubmit(description, priority)\n                   }/>\n        </div>\n    );\n};","import {useState} from \"react\";\nimport './Alert.css';\n\nfunction Alert(props) {\n    const [newDesc, setNewDesc] = useState(\"\");\n    const [priority, setPriority] = useState(1);\n\n    return <div className={\"backdrop\"}>\n        <div className=\"modal\">\n            Enter a new name for your item:\n            <div className={\"text\"}>\n                <input type={\"text\"} placeholder={\"Enter New Description\"}\n                       onChange={(e) => setNewDesc(e.currentTarget.value)}/>\n                <select onChange={(e) => setPriority(e.currentTarget.value)}>\n                    <option value={1}>High</option>\n                    <option value={2}>Medium</option>\n                    <option value={3}>Low</option>\n                </select>\n            </div>\n\n            <div className=\"alert-buttons\">\n                <button className={\"alert-button\"} type={\"button\"}\n                        onClick={props.onClose}>\n                    Cancel\n                </button>\n                <button className={\"alert-button\"} type={\"button\"}\n                        onClick={() => {\n                            props.onClose();\n                            props.onOK(newDesc, priority);\n                        }}>\n                    OK\n                </button>\n            </div>\n        </div>\n    </div>\n}\n\nexport default Alert;","import List from './List'\nimport './App.css';\nimport {useState} from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport AddTask from \"./AddTask\";\nimport Alert from \"./Alert\";\nimport firebase from \"firebase/compat\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDcjlwvBtxAl8BKu_8evho99ks_6MBiWZo\",\n    authDomain: \"nskr-124lab4.firebaseapp.com\",\n    projectId: \"nskr-124lab4\",\n    storageBucket: \"nskr-124lab4.appspot.com\",\n    messagingSenderId: \"613050589081\",\n    appId: \"1:613050589081:web:d234d16f271e4ebe1ffd08\",\n    measurementId: \"G-6XSHMJM1HG\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\nconst collectionName = \"List\";\nfunction App() {\n    const query = db.collection(collectionName);\n    const [sortVal, setSortVal] = useState(\"description\")\n    const [value, loading, error] = useCollection(query.orderBy(sortVal, \"asc\"));\n    const [isVisible, setVisibility] = useState(true);\n    const [showAlert, setShowAlert] = useState(false);\n    const [storeID, setStoreID] = useState(\"\");\n\n    let data = null;\n    if (value) {\n        data = value.docs.map((doc) => {\n            return {...doc.data()}});\n    }\n    function addData(description, priority) {\n        const item = {\n            id: generateUniqueID(),\n            description: description,\n            isCompleted: false,\n            creationDate: Date.now(),\n            priority: priority,\n        };\n        const docRef = query.doc(item.id);\n        docRef.set(item);\n    }\n\n    // handles checkboxes\n    function handleItemChange(itemID, field, value) {\n        const doc = db.collection(collectionName).doc(itemID);\n        doc.update({\n            [field]: value,\n        })\n    }\n\n    // handles editing an item\n    function handleEditItem(description, priority) {\n        const doc = db.collection(collectionName).doc(storeID);\n        doc.update({\n            description: description,\n            priority: priority,\n        })\n    }\n\n    function handleDelete() {\n        data.forEach((item) => item.isCompleted && db.collection(collectionName).doc(item.id).delete());\n    }\n\n    function toggleModal() {\n        setShowAlert(!showAlert);\n    }\n\n    function onChangeID(itemID) {\n        setStoreID(itemID);\n    }\n\n    function handleSort(type) {\n        db.collection(collectionName).orderBy(type);\n    }\n    return (\n        <div className={\"todo\"}>\n            <div>\n                <h1>TO-DO LIST</h1>\n\n                <div className={isVisible ? \"visible\" : null}>\n                    <button className={\"button\"} type={\"button\"} onClick={() => {\n                        setVisibility(!isVisible);\n                    }}>{isVisible ? \"Hide Completed\" : \"Show Completed\"}</button>\n                    <button className={\"button\"} type={\"button\"} onClick={handleDelete}>Delete Completed</button>\n                </div>\n                <div className={\"sorting\"}>\n                    <label id=\"sort\" htmlFor={\"sort-by\"}>Sort By</label>\n                    <select id={\"sort-by\"} onChange={(e) => setSortVal(e.currentTarget.value)}>\n                        <option value={\"priority\"}>Priority</option>\n                        <option value={\"description\"}>Name</option>\n                        <option value={\"creationDate\"}>Creation Date</option>\n                    </select>\n                </div>\n                <AddTask data={data} onSubmit={addData}/>\n                {/*{[...data].sort((a, b) => a.priority - b.priority).map(item => (item.priority))}*/}\n                {data && <List todo={isVisible ? data : data.filter(item => !(item.isCompleted))}\n                      onItemChange={handleItemChange} onButtonClick={toggleModal} onPassID={onChangeID}></List>}\n            </div>\n            {showAlert && <Alert onClose={toggleModal} onOK={handleEditItem}/>}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}